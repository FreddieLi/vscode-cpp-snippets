{
	"for": {
		"prefix": "for",
		"body": [
			"for (${1:size_t} ${2:i} = ${3:0}; ${2:i} < ${4:length}; ${2:i}++)",
			"{",
			"	$5",
			"}"
		],
		"description": "Code snippet for 'for' loop"
	},
	"forr": {
		"prefix": "forr",
		"body": [
			"for (int ${1:i} = ${2:length} - 1; ${1:i} >= ${3:0}; ${1:i}--)",
			"{",
			"	$4",
			"}"
		],
		"description": "Code snippet for reverse 'for' loop"
	},
	"do": {
		"prefix": "do",
		"body": [
			"do",
			"{",
			"	$1",
			"} while($2);"
		],
		"description": "Code snippet for do...while loop"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for while loop"
	},
	"foreach": {
		"prefix": "foreach",
		"body": [
			"for(auto ${1:var} : ${2:collection_to_loop})",
			"{",
			"	$3",
			"}"
		],
		"description": "Code snippet for range-based for loop (c++11) statement"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for if statement"
	},
	"else": {
		"prefix": "else",
		"body": [
			"else",
			"{",
			"	$1",
			"}"
		],
		"description": "Code snippet for else statement"
	},
	"else if": {
		"prefix": "else if",
		"body": [
			"else if ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for else-if statement"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum ${1:MyEnum}",
			"{",
			"	$2",
			"};"
		],
		"description": "Code snippet for enum"
	},
	"enum class": {
		"prefix": "enum class",
		"body": [
			"enum class ${1:MyClass} { };"
		],
		"description": "Code snippet for enum class (c++11)"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${1:MyClass}",
			"{",
			"public:",
			"	${1:MyClass}();",
			"	${1:MyClass}(${1:MyClass} &&) = default;",
			"	${1:MyClass}(const ${1:MyClass} &) = default;",
			"	${1:MyClass} &operator=(${1:MyClass} &&) = default;",
			"	${1:MyClass} &operator=(const ${1:MyClass} &) = default;",
			"	~${1:MyClass}();",
			"",
			"private:",
			"	$2",
			"};",
			"",
			"${1:MyClass}::${1:MyClass}()",
			"{",
			"}",
			"",
			"${1:MyClass}::~${1:MyClass}()",
			"{",
			"}"
		],
		"description": "Code snippet for class"
	},
	"classi": {
		"prefix": "classi",
		"body": [
			"class ${1:MyClass}",
			"{",
			"public:",
			"	${1:MyClass}() = default;",
			"	${1:MyClass}(${1:MyClass} &&) = default;",
			"	${1:MyClass}(const ${1:MyClass} &) = default;",
			"	${1:MyClass} &operator=(${1:MyClass} &&) = default;",
			"	${1:MyClass} &operator=(const ${1:MyClass} &) = default;",
			"	~${1:MyClass}() = default;",
			"",
			"private:",
			"	$2",
			"};"
		],
		"description": "Code snippet for class with inline constructor/destructor"
	},
	"#ifdef": {
		"prefix": "#ifdef",
		"body": [
			"#ifdef ${1:DEBUG}",
			"$2",
			"#endif // ${1:DEBUG}"
		],
		"description": "Code snippet for #ifdef"
	},
	"#ifndef": {
		"prefix": "#ifndef",
		"body": [
			"#ifndef ${1:1}",
			"$2",
			"#endif // !$1"
		],
		"description": "Code snippet for #ifndef"
	},
	"#if": {
		"prefix": "#if",
		"body": [
			"#ifdef ${1:0}",
			"$2",
			"#endif // $1"
		],
		"description": "Code snippet for #if"
	},
	"struct": {
		"prefix": "struct",
		"body": [
			"struct ${1:MyStruct}",
			"{",
			"	$2",
			"};"
		],
		"description": "Code snippet for struct"
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${1:switch_on})",
			"{",
			"default:",
			"	break;$2",
			"}"
		],
		"description": "Code snippet for switch statement"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try",
			"{",
			"$1",
			"}",
			"catch (const std::exception&)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for try catch"
	},
	"union": {
		"prefix": "union",
		"body": [
			"union ${1:MyUnion}",
			"{",
			"	$2",
			"};"
		],
		"description": "Code snippet for union"
	},
	"cout": {
		"prefix": "cout",
		"body": [
			"std::cout << \"${1:/* message */}\" << std::endl;"
		],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	},
	"#inc": {
		"prefix": "#inc",
		"body": [
			"#include \"$1\""
		],
		"description": "Code snippet for #include \" \""
	},
	"#inc<": {
		"prefix": "#inc<",
		"body": [
			"#include <$1>"
		],
		"description": "Code snippet for #include \" \""
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main(int argc, const char** argv) {",
			"    ${1}",
			"    return 0;",
			"}"
		],
		"description": "Code snippet for main function"
	}
}
